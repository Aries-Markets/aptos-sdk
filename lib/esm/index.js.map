{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AptosClient,\n  AptosAccount,\n  Types,\n  HexString,\n  MaybeHexString,\n  FaucetClient,\n} from \"aptos\";\nimport Big from \"big.js\";\nimport * as sbv2 from \"@switchboard-xyz/switchboard-v2\";\nimport * as anchor from \"@project-serum/anchor\";\n\n// Address that deployed the module\n// export const SWITCHBOARD_DEVNET_ADDRESS = `0x${\"2B3C332C6C95D3B717FDF3644A7633E8EFA7B1451193891A504A6A292EDC0039\".toLowerCase()}`;\n//\n// // Address of the account that owns the Switchboard resource\n// export const SWITCHBOARD_STATE_ADDRESS = `0x${\"2B3C332C6C95D3B717FDF3644A7633E8EFA7B1451193891A504A6A292EDC0039\".toLowerCase()}`;\n\nexport class AptosDecimal {\n  constructor(\n    readonly mantissa: string,\n    readonly scale: number,\n    readonly neg: boolean\n  ) {}\n\n  toBig(): Big {\n    const oldDp = Big.DP;\n    Big.DP = 18;\n    let result = new Big(this.mantissa);\n    if (this.neg === true) {\n      result = result.mul(-1);\n    }\n    const TEN = new Big(10);\n    result = result.div(TEN.pow(this.scale));\n    Big.DP = oldDp;\n    return result;\n  }\n\n  static fromBig(val: Big): AptosDecimal {\n    const value = val.c.slice();\n    let e = val.e;\n    while (e > 18) {\n      value.pop();\n      e -= 1;\n    }\n    return new AptosDecimal(value.join(\"\"), e, val.s === -1);\n  }\n\n  static fromObj(obj: Object): AptosDecimal {\n    const properties = [\"mantissa\", \"scale\", \"neg\"];\n    properties.forEach((p) => {\n      if (!(p in obj)) {\n        throw new Error(`Object is missing property ${p}`);\n      }\n    });\n\n    return new AptosDecimal(obj[\"mantissa\"], obj[\"scale\"], obj[\"neg\"]);\n  }\n}\n\nexport interface AggregatorAddJobParams {\n  job: MaybeHexString;\n  weight?: number;\n}\n\nexport interface AggregatorInitParams {\n  // address: MaybeHexString; // arbitrary key associated with aggregator @NOTE: Cannot be altered\n  authority: MaybeHexString; // owner of aggregator\n  name?: string;\n  metadata?: string;\n  queueAddress: MaybeHexString;\n  batchSize: number;\n  minOracleResults: number;\n  minJobResults: number;\n  minUpdateDelaySeconds: number;\n  startAfter?: number;\n  varianceThreshold?: number;\n  varianceThresholdScale?: number;\n  forceReportPeriod?: number;\n  expiration?: number;\n}\n\nexport interface AggregatorSaveResultParams {\n  //state_address: address,\n  oracle_address: MaybeHexString;\n  oracle_idx: number;\n  error: boolean;\n  // this should probably be automatically generated\n  value_num: number;\n  value_scale_factor: number; // scale factor\n  value_neg: boolean;\n  jobs_checksum: string;\n}\n\nexport interface JobInitParams {\n  name: string;\n  metadata: string;\n  authority: MaybeHexString;\n  data: string;\n}\n\nexport interface AggregatorRemoveJobParams {\n  aggregatorAddress: string;\n  job: string;\n}\n\nexport interface AggregatorSetConfigParams {\n  address: string;\n  authority: string;\n  name?: string;\n  metadata?: string;\n  queueAddress?: string;\n  batchSize: number;\n  minOracleResults: number;\n  minJobResults: number;\n  minUpdateDelaySeconds: number;\n  startAfter?: number;\n  varianceThreshold?: number;\n  forceReportPeriod?: number;\n  expiration?: number;\n}\n\nexport interface CrankInitParams {\n  address: string;\n  queueAddress: HexString;\n}\n\nexport interface CrankPopParams {\n  crankAddress: string;\n}\n\nexport interface CrankPushParams {\n  crankAddress: string;\n  aggregatorAddress: string;\n}\n\nexport interface OracleInitParams {\n  address: MaybeHexString;\n  name: string;\n  metadata: string;\n  authority: MaybeHexString;\n  queue: MaybeHexString;\n}\n\nexport interface OracleQueueInitParams {\n  name: string;\n  metadata: string;\n  authority: MaybeHexString;\n  oracleTimeout: number;\n  reward: number;\n  minStake: number;\n  slashingEnabled: boolean;\n  varianceToleranceMultiplierValue: number;\n  varianceToleranceMultiplierScale: number;\n  feedProbationPeriod: number;\n  consecutiveFeedFailureLimit: number;\n  consecutiveOracleFailureLimit: number;\n  unpermissionedFeedsEnabled: boolean;\n  unpermissionedVrfEnabled: boolean;\n  lockLeaseFunding: boolean;\n\n  // this needs to be swapped with Coin or something later\n  mint: MaybeHexString;\n  enableBufferRelayers: boolean;\n  maxSize: number;\n}\n\nexport type EventCallback = (\n  e: Types.Event\n) => Promise<void> /** |  (() => Promise<void>) */;\n\n/** Convert string to hex-encoded utf-8 bytes. */\nfunction stringToHex(text: string) {\n  return Buffer.from(text, \"utf-8\").toString(\"hex\");\n}\n\n/**\n * Sends and waits for an aptos tx to be confirmed\n * @param client\n * @param signer\n * @param method Aptos module method (ex: 0xSwitchboard::AggregatorAddJobAction)\n * @param args Arguments for method (converts numbers to strings)\n * @returns\n */\nexport async function sendAptosTx(\n  client: AptosClient,\n  signer: AptosAccount,\n  method: string,\n  args: Array<any>,\n  retryCount = 2\n): Promise<string> {\n  const payload: Types.TransactionPayload = {\n    type: \"script_function_payload\",\n    function: method as any,\n    type_arguments: [],\n    arguments: args,\n  };\n  const txnRequest = await client.generateTransaction(\n    signer.address(),\n    payload\n  );\n\n  const simulation = (await client.simulateTransaction(signer, txnRequest))[0];\n  if (simulation.vm_status === \"Out of gas\") {\n    if (retryCount > 0) {\n      const faucetClient = new FaucetClient(\n        \"https://fullnode.devnet.aptoslabs.com/\",\n        \"https://faucet.devnet.aptoslabs.com\"\n      );\n      await faucetClient.fundAccount(signer.address(), 5000);\n      return sendAptosTx(client, signer, method, args, --retryCount);\n    }\n  }\n  if (simulation.success === false) {\n    console.log(`TxGas: ${simulation.gas_used}`);\n    console.log(`TxGas: ${simulation.hash}`);\n\n    throw new Error(`TxFailure: ${simulation.vm_status}`);\n  } else {\n    console.log(`TxGas: ${simulation.gas_used}`);\n  }\n\n  const signedTxn = await client.signTransaction(signer, txnRequest);\n  const transactionRes = await client.submitTransaction(signedTxn);\n  await client.waitForTransaction(transactionRes.hash);\n  return transactionRes.hash;\n}\n\ninterface TableType {\n  stateKey: string;\n  keyType: string;\n  valueType: string;\n}\n\n// const LeaseTable: TableType = {\n// stateKey: `leases`,\n// keyType: `vector<u8>`,\n// valueType: `${SWITCHBOARD_DEVNET_ADDRESS}::Lease::Lease`,\n// };\n//\n// const PermissionTable: TableType = {\n// stateKey: `permissions`,\n// keyType: `vector<u8>`,\n// valueType: `${SWITCHBOARD_DEVNET_ADDRESS}::Permission::Permission`,\n// };\n\n/**\n * Retrieve Table Item\n * @param client\n * @param tableType\n * @param key string to fetch table item by\n */\nasync function getTableItem(\n  pid: HexString,\n  client: AptosClient,\n  tableType: TableType,\n  key: string\n): Promise<unknown | undefined> {\n  // get table resource\n  const switchboardTableResource = await client.getAccountResource(\n    pid,\n    `${pid}::Switchboard::State` as any\n  );\n\n  const handle = (switchboardTableResource.data as any)[tableType.stateKey]\n    ?.handle;\n\n  const getTokenTableItemRequest: Types.TableItemRequest = {\n    key_type: tableType.keyType,\n    value_type: tableType.valueType,\n    key: key,\n  };\n\n  try {\n    // fetch table item (it's an object with the schema structure)\n    const tableItem = await client.getTableItem(\n      handle,\n      getTokenTableItemRequest\n    );\n    return tableItem?.data;\n  } catch (e) {\n    console.log(e);\n    return;\n  }\n}\n/**\n * Poll Events on Aptos\n * @Note uncleared setTimeout calls will keep processes from ending organically (SIGTERM is needed)\n */\nexport class AptosEvent {\n  intervalId?: ReturnType<typeof setInterval>;\n  constructor(\n    readonly client: AptosClient,\n    readonly eventHandlerOwner: HexString,\n    readonly eventOwnerStruct: string,\n    readonly eventHandlerName: string,\n    readonly pollIntervalMs: number = 1000\n  ) {}\n\n  async onTrigger(\n    callback: EventCallback,\n    errorHandler?: (error: unknown) => void\n  ) {\n    let lastSequenceNumber = \"0\";\n    const ownerData = await this.client.getAccountResource(\n      this.eventHandlerOwner.hex().toString(),\n      this.eventOwnerStruct as any\n    );\n    try {\n      lastSequenceNumber = (\n        Number(ownerData.data[this.eventHandlerName].counter) - 1\n      ).toString();\n    } catch (error) {\n      console.error(JSON.stringify(ownerData, undefined, 2), error);\n    }\n\n    this.intervalId = setInterval(async () => {\n      try {\n        const events = await this.client.getEventsByEventHandle(\n          this.eventHandlerOwner,\n          this.eventOwnerStruct as any,\n          this.eventHandlerName,\n          {\n            start: BigInt(Number(lastSequenceNumber) + 1),\n            limit: 500,\n          }\n        );\n        if (events.length !== 0) {\n          // increment sequence number\n          lastSequenceNumber = events.at(-1)!.sequence_number;\n        }\n        for (let event of events) {\n          callback(event).catch((error) => {\n            if (errorHandler) {\n              errorHandler(error);\n            } else {\n              throw error;\n            }\n          });\n        }\n      } catch (error) {\n        if (errorHandler) {\n          errorHandler(error);\n        }\n      }\n    }, this.pollIntervalMs);\n    return this.intervalId;\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n  }\n}\n\n/**\n * Common Constructor\n */\nclass SwitchboardResource {\n  client: AptosClient;\n  address: MaybeHexString;\n  tableType: TableType;\n  account?: AptosAccount;\n\n  constructor(\n    tableType: TableType,\n    client: AptosClient,\n    address: MaybeHexString,\n    account?: AptosAccount\n  ) {\n    this.tableType = tableType;\n    this.client = client;\n    this.account = account;\n    this.address = address;\n  }\n\n  // try to load data from on-chain\n  // async loadData(): Promise<unknown | undefined> {\n  // return await getTableItem(\n  // this.client,\n  // this.tableType,\n  // HexString.ensure(this.address).hex()\n  // );\n  // }\n}\n\nexport class State {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly account: AptosAccount,\n    readonly devnetAddress: MaybeHexString\n  ) {}\n\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    devnetAddress: MaybeHexString\n  ): Promise<[State, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${devnetAddress}::SwitchboardInitAction::run`,\n      []\n    );\n\n    return [new State(client, account.address(), account, devnetAddress), tx];\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        this.address,\n        `${this.devnetAddress}::Switchboard::State` as any\n      )\n    ).data;\n  }\n}\n\nexport class Aggregator {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly account: AptosAccount,\n    readonly devnetAddress: MaybeHexString,\n    readonly stateAddress: MaybeHexString\n  ) {}\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${HexString.ensure(\n          this.devnetAddress\n        ).hex()}::Aggregator::Aggregator` as any\n      )\n    ).data;\n  }\n\n  async loadJobs(): Promise<Array<sbv2.OracleJob>> {\n    const data = await this.loadData();\n    const jobs = data.job_keys.map(\n      (key: string) =>\n        new Job(this.client, key, this.devnetAddress, this.stateAddress)\n    );\n    const promises: Array<Promise<sbv2.OracleJob>> = [];\n    for (let job of jobs) {\n      promises.push(job.loadJob());\n    }\n    return await Promise.all(promises);\n  }\n\n  /**\n   * Initialize an Aggregator\n   * @param client\n   * @param account\n   * @param params AggregatorInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: AggregatorInitParams,\n    devnetAddress: MaybeHexString,\n    stateAddress: MaybeHexString\n  ): Promise<[Aggregator, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${devnetAddress}::AggregatorInitAction::run`,\n      [\n        HexString.ensure(stateAddress).hex(),\n        Buffer.from(params.name ?? \"\").toString(\"hex\"),\n        Buffer.from(params.metadata ?? \"\").toString(\"hex\"),\n        HexString.ensure(params.queueAddress).hex(),\n        params.batchSize.toString(),\n        params.minOracleResults.toString(),\n        params.minJobResults.toString(),\n        params.minUpdateDelaySeconds.toString(),\n        (params.startAfter ?? 0).toString(),\n        (params.varianceThreshold ?? 0).toString(),\n        params.varianceThresholdScale ?? 0,\n        (params.forceReportPeriod ?? 0).toString(),\n        (params.expiration ?? 0).toString(),\n        HexString.ensure(params.authority).hex(),\n      ]\n    );\n\n    return [\n      new Aggregator(\n        client,\n        account.address(),\n        account,\n        devnetAddress,\n        stateAddress\n      ),\n      tx,\n    ];\n  }\n\n  async addJob(\n    account: AptosAccount,\n    params: AggregatorAddJobParams\n  ): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.devnetAddress}::AggregatorAddJobAction::run`,\n      [\n        HexString.ensure(this.stateAddress).hex(),\n        HexString.ensure(this.address).hex(),\n        HexString.ensure(params.job).hex(),\n        params.weight || 1,\n      ]\n    );\n  }\n\n  async saveResult(\n    account: AptosAccount,\n    params: AggregatorSaveResultParams\n  ): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.devnetAddress}::AggregatorSaveResultAction::run`,\n      [\n        HexString.ensure(this.stateAddress).hex(),\n        HexString.ensure(params.oracle_address).hex(),\n        HexString.ensure(this.address).hex(),\n        params.oracle_idx.toString(),\n        params.error,\n        params.value_num.toString(),\n        params.value_scale_factor,\n        params.value_neg,\n        stringToHex(params.jobs_checksum),\n      ]\n    );\n  }\n\n  async openRound(): Promise<string> {\n    if (!this.account) {\n      throw \"Save Result Error: No Payer Found\";\n    }\n\n    return await sendAptosTx(\n      this.client,\n      this.account,\n      `${this.devnetAddress}::AggregatorOpenRoundAction::run`,\n      [\n        HexString.ensure(this.stateAddress).hex(),\n        HexString.ensure(this.address).hex(),\n      ]\n    );\n  }\n\n  async watch(callback: EventCallback): Promise<AptosEvent> {\n    const event = new AptosEvent(\n      this.client,\n      HexString.ensure(this.stateAddress),\n      `${this.devnetAddress}::Switchboard::State`,\n      \"aggregator_update_events\",\n      1000\n    );\n    await event.onTrigger(callback);\n    return event;\n  }\n\n  async shouldReportValue(value: Big, aggregator: any): Promise<boolean> {\n    if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {\n      return true;\n    }\n    const timestamp = new anchor.BN(Math.round(Date.now() / 1000), 10);\n    const startAfter = new anchor.BN(aggregator.startAfter, 10);\n    if (startAfter.gt(timestamp)) {\n      return false;\n    }\n    const varianceThreshold: Big = new AptosDecimal(\n      aggregator.varianceThreshold.value,\n      aggregator.varianceThreshold.dec,\n      aggregator.varianceThreshold.neg\n    ).toBig();\n    const latestResult: Big = new AptosDecimal(\n      aggregator.latestConfirmedRound.result.value,\n      aggregator.latestConfirmedRound.result.dec,\n      aggregator.latestConfirmedRound.result.neg\n    ).toBig();\n    const forceReportPeriod = new anchor.BN(aggregator.forceReportPeriod, 10);\n    const lastTimestamp = new anchor.BN(\n      aggregator.latestConfirmedRound.roundOpenTimestamp,\n      10\n    );\n    if (lastTimestamp.add(forceReportPeriod).lt(timestamp)) {\n      return true;\n    }\n    let diff = safeDiv(latestResult, value);\n    if (diff.abs().gt(1)) {\n      diff = safeDiv(value, latestResult);\n    }\n    // I dont want to think about variance percentage when values cross 0.\n    // Changes the scale of what we consider a \"percentage\".\n    if (diff.lt(0)) {\n      return true;\n    }\n    const changePercent = new Big(1).minus(diff).mul(100);\n    return changePercent.gt(varianceThreshold);\n  }\n}\n\nexport class Job {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly devnetAddress: MaybeHexString,\n    readonly stateAddress: MaybeHexString\n  ) {}\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        this.address,\n        `${this.devnetAddress}::Job::Job` as any\n      )\n    ).data;\n  }\n\n  async loadJob(): Promise<sbv2.OracleJob> {\n    const data = await this.loadData();\n    return sbv2.OracleJob.decodeDelimited(\n      Buffer.from(data.data.slice(2), \"hex\")\n    );\n  }\n\n  /**\n   * Initialize a Job stored in the switchboard resource account\n   * @param client\n   * @param account\n   * @param params JobInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: JobInitParams,\n    devnetAddress: MaybeHexString,\n    stateAddress: MaybeHexString\n  ): Promise<[Job, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${devnetAddress}::JobInitAction::run`,\n      [\n        HexString.ensure(stateAddress).hex(),\n        stringToHex(params.name),\n        stringToHex(params.metadata),\n        HexString.ensure(params.authority).hex(),\n        params.data,\n      ]\n    );\n\n    return [\n      new Job(client, account.address(), devnetAddress, stateAddress),\n      tx,\n    ];\n  }\n}\n\nexport class Crank {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly devnetAddress: MaybeHexString,\n    readonly stateAddress: MaybeHexString\n  ) {}\n\n  /**\n   * Initialize a Crank stored in the switchboard resource account\n   * @param client\n   * @param account account that will be the authority of the Crank\n   * @param params CrankInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: CrankInitParams,\n    devnetAddress: MaybeHexString,\n    stateAddress: MaybeHexString\n  ): Promise<[Crank, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${devnetAddress}::CrankInitAction::run`,\n      [\n        HexString.ensure(stateAddress).hex(),\n        HexString.ensure(params.address).hex(),\n        HexString.ensure(params.queueAddress).hex(),\n      ]\n    );\n\n    return [\n      new Crank(client, account.address(), devnetAddress, stateAddress),\n      tx,\n    ];\n  }\n\n  /**\n   * Push an aggregator to a Crank\n   * @param params CrankPushParams\n   */\n  async push(account: AptosAccount, params: CrankPushParams): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.devnetAddress}::CrankPushAction::run`,\n      [\n        HexString.ensure(this.stateAddress).hex(),\n        HexString.ensure(params.crankAddress).hex(),\n        HexString.ensure(params.aggregatorAddress).hex(),\n      ]\n    );\n  }\n\n  /**\n   * Pop an aggregator off the Crank\n   * @param params CrankPopParams\n   */\n  async pop(account: AptosAccount, params: CrankPopParams): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.devnetAddress}::CrankPopAction::run`,\n      [\n        HexString.ensure(this.stateAddress).hex(),\n        HexString.ensure(params.crankAddress).hex(),\n      ]\n    );\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${HexString.ensure(this.devnetAddress).hex()}::Crank::Crank` as any\n      )\n    ).data;\n  }\n}\n\nexport class Oracle {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly devnetAddress: MaybeHexString,\n    readonly stateAddress: MaybeHexString\n  ) {}\n\n  /**\n   * Initialize a Oracle stored in the switchboard resource account\n   * @param client\n   * @param account\n   * @param params Oracle initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: OracleInitParams,\n    devnetAddress,\n    stateAddress\n  ): Promise<[Oracle, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${devnetAddress}::OracleInitAction::run`,\n      [\n        HexString.ensure(stateAddress).hex(),\n        stringToHex(params.name),\n        stringToHex(params.metadata),\n        HexString.ensure(params.authority).hex(),\n        HexString.ensure(params.queue).hex(),\n      ]\n    );\n\n    return [\n      new Oracle(client, account.address(), devnetAddress, stateAddress),\n      tx,\n    ];\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${HexString.ensure(this.devnetAddress).hex()}::Oracle::Oracle` as any\n      )\n    ).data;\n  }\n\n  /**\n   * Oracle Heartbeat Action\n   */\n  async heartbeat(account: AptosAccount): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.devnetAddress}::OracleHeartbeatAction::run`,\n      [\n        HexString.ensure(this.stateAddress).hex(),\n        HexString.ensure(this.address).hex(),\n      ]\n    );\n  }\n}\n\nexport class OracleQueue {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly devnetAddress: MaybeHexString,\n    readonly stateAddress: MaybeHexString\n  ) {}\n\n  /**\n   * Initialize a OracleQueue stored in the switchboard resource account\n   * @param client\n   * @param account\n   * @param params OracleQueue initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: OracleQueueInitParams,\n    devnetAddress,\n    stateAddress\n  ): Promise<[OracleQueue, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${devnetAddress}::OracleQueueInitAction::run`,\n      [\n        HexString.ensure(stateAddress).hex(),\n        stringToHex(params.name),\n        stringToHex(params.metadata),\n        HexString.ensure(params.authority).hex(),\n        params.oracleTimeout.toString(),\n        params.reward.toString(),\n        params.minStake.toString(),\n        params.slashingEnabled,\n        params.varianceToleranceMultiplierValue.toString(),\n        params.varianceToleranceMultiplierScale,\n        params.feedProbationPeriod.toString(),\n        params.consecutiveFeedFailureLimit.toString(),\n        params.consecutiveOracleFailureLimit.toString(),\n        params.unpermissionedFeedsEnabled,\n        params.unpermissionedVrfEnabled,\n        params.lockLeaseFunding,\n        HexString.ensure(params.mint).hex(),\n        params.enableBufferRelayers,\n        params.maxSize.toString(),\n      ]\n    );\n\n    return [\n      new OracleQueue(client, account.address(), devnetAddress, stateAddress),\n      tx,\n    ];\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${HexString.ensure(\n          this.devnetAddress\n        ).hex()}::OracleQueue::OracleQueue` as any\n      )\n    ).data;\n  }\n}\n\nfunction safeDiv(number_: Big, denominator: Big, decimals = 20): Big {\n  const oldDp = Big.DP;\n  Big.DP = decimals;\n  const result = number_.div(denominator);\n  Big.DP = oldDp;\n  return result;\n}\n"]}