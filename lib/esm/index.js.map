{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AptosClient,\n  AptosAccount,\n  Types,\n  HexString,\n  MaybeHexString,\n} from \"aptos\";\nimport Big from \"big.js\";\nimport * as sbv2 from \"@switchboard-xyz/switchboard-v2\";\n\n// Address that deployed the module\nexport const SWITCHBOARD_DEVNET_ADDRESS =\n  \"0x348ecb66a5d9edab8d175f647d5e99d6962803da7f5d3d2eb839387aeb118300\";\n\n// Address of the account that owns the Switchboard resource\nexport const SWITCHBOARD_STATE_ADDRESS =\n  \"0x348ecb66a5d9edab8d175f647d5e99d6962803da7f5d3d2eb839387aeb118300\";\n\nexport class AptosDecimal {\n  constructor(\n    readonly mantissa: string,\n    readonly scale: number,\n    readonly neg: boolean\n  ) {}\n\n  toBig(): Big {\n    const oldDp = Big.DP;\n    Big.DP = 18;\n    let result = new Big(this.mantissa);\n    if (this.neg === true) {\n      result = result.mul(-1);\n    }\n    const TEN = new Big(10);\n    result = result.div(TEN.pow(this.scale));\n    Big.DP = oldDp;\n    return result;\n  }\n\n  static fromBig(val: Big): AptosDecimal {\n    const value = val.c.slice();\n    let e = val.e;\n    while (e > 18) {\n      value.pop();\n      e -= 1;\n    }\n    return new AptosDecimal(value.join(\"\"), e, val.s === -1);\n  }\n}\n\nexport interface AggregatorAddJobParams {\n  job: MaybeHexString;\n  weight?: number;\n}\n\nexport interface AggregatorInitParams {\n  address: MaybeHexString; // arbitrary key associated with aggregator @NOTE: Cannot be altered\n  authority: MaybeHexString; // owner of aggregator\n  name?: string;\n  metadata?: string;\n  queueAddress?: MaybeHexString;\n  batchSize: number;\n  minOracleResults: number;\n  minJobResults: number;\n  minUpdateDelaySeconds: number;\n  startAfter?: number;\n  varianceThreshold?: number;\n  varianceThresholdScale?: number;\n  forceReportPeriod?: number;\n  expiration?: number;\n}\n\nexport interface AggregatorSaveResultParams {\n  //state_address: address,\n  oracle_address: MaybeHexString;\n  oracle_idx: number;\n  error: boolean;\n  // this should probably be automatically generated\n  value_num: number;\n  value_scale_factor: number; // scale factor\n  value_neg: boolean;\n  jobs_checksum: string;\n}\n\nexport interface JobInitParams {\n  name: string;\n  metadata: string;\n  authority: MaybeHexString;\n  data: string;\n}\n\nexport interface AggregatorRemoveJobParams {\n  aggregatorAddress: string;\n  job: string;\n}\n\nexport interface AggregatorSetConfigParams {\n  address: string;\n  authority: string;\n  name?: string;\n  metadata?: string;\n  queueAddress?: string;\n  batchSize: number;\n  minOracleResults: number;\n  minJobResults: number;\n  minUpdateDelaySeconds: number;\n  startAfter?: number;\n  varianceThreshold?: number;\n  forceReportPeriod?: number;\n  expiration?: number;\n}\n\nexport interface CrankInitParams {\n  address: string;\n  queueAddress: string;\n}\n\nexport interface CrankPopParams {\n  crankAddress: string;\n}\n\nexport interface CrankPushParams {\n  crankAddress: string;\n  aggregatorAddress: string;\n}\n\nexport interface OracleInitParams {\n  address: MaybeHexString;\n  name: string;\n  metadata: string;\n  authority: MaybeHexString;\n  queue: MaybeHexString;\n}\n\nexport interface OracleQueueInitParams {\n  name: string;\n  metadata: string;\n  authority: MaybeHexString;\n  oracleTimeout: number;\n  reward: number;\n  minStake: number;\n  slashingEnabled: boolean;\n  varianceToleranceMultiplierValue: number;\n  varianceToleranceMultiplierScale: number;\n  feedProbationPeriod: number;\n  consecutiveFeedFailureLimit: number;\n  consecutiveOracleFailureLimit: number;\n  unpermissionedFeedsEnabled: boolean;\n  unpermissionedVrfEnabled: boolean;\n  lockLeaseFunding: boolean;\n\n  // this needs to be swapped with Coin or something later\n  mint: MaybeHexString;\n  enableBufferRelayers: boolean;\n  maxSize: number;\n}\n\nexport type EventCallback = (\n  e: Types.Event\n) => Promise<void> | (() => Promise<void>);\n\n/** Convert string to hex-encoded utf-8 bytes. */\nfunction stringToHex(text: string) {\n  return Buffer.from(text, \"utf-8\").toString(\"hex\");\n}\n\n/**\n * Sends and waits for an aptos tx to be confirmed\n * @param client\n * @param signer\n * @param method Aptos module method (ex: 0xSwitchboard::AggregatorAddJobAction)\n * @param args Arguments for method (converts numbers to strings)\n * @returns\n */\nexport async function sendAptosTx(\n  client: AptosClient,\n  signer: AptosAccount,\n  method: string,\n  args: Array<any>\n): Promise<string> {\n  const payload: Types.TransactionPayload = {\n    type: \"script_function_payload\",\n    function: method,\n    type_arguments: [],\n    arguments: args,\n  };\n  const txnRequest = await client.generateTransaction(\n    signer.address(),\n    payload\n  );\n\n  const simulation = await client.simulateTransaction(signer, txnRequest);\n  if (simulation.success === false) {\n    console.log(`TxGas: ${simulation.gas_used}`);\n    console.log(`TxGas: ${simulation.hash}`);\n    throw new Error(`TxFailure: ${simulation.vm_status}`);\n  } else {\n    console.log(`TxGas: ${simulation.gas_used}`);\n  }\n\n  const signedTxn = await client.signTransaction(signer, txnRequest);\n  const transactionRes = await client.submitTransaction(signedTxn);\n  await client.waitForTransaction(transactionRes.hash);\n  return transactionRes.hash;\n}\n\ninterface TableType {\n  stateKey: string;\n  keyType: string;\n  valueType: string;\n}\n\nconst LeaseTable: TableType = {\n  stateKey: `leases`,\n  keyType: `vector<u8>`,\n  valueType: `${SWITCHBOARD_DEVNET_ADDRESS}::Lease::Lease`,\n};\n\nconst PermissionTable: TableType = {\n  stateKey: `permissions`,\n  keyType: `vector<u8>`,\n  valueType: `${SWITCHBOARD_DEVNET_ADDRESS}::Permission::Permission`,\n};\n\n/**\n * Retrieve Table Item\n * @param client\n * @param tableType\n * @param key string to fetch table item by\n */\nasync function getTableItem(\n  client: AptosClient,\n  tableType: TableType,\n  key: string\n): Promise<unknown | undefined> {\n  // get table resource\n  const switchboardTableResource = await client.getAccountResource(\n    SWITCHBOARD_STATE_ADDRESS,\n    `${SWITCHBOARD_DEVNET_ADDRESS}::Switchboard::State`\n  );\n\n  const handle = (switchboardTableResource.data as any)[tableType.stateKey]\n    ?.handle;\n\n  const getTokenTableItemRequest: Types.TableItemRequest = {\n    key_type: tableType.keyType,\n    value_type: tableType.valueType,\n    key: key,\n  };\n\n  try {\n    // fetch table item (it's an object with the schema structure)\n    const tableItem = await client.getTableItem(\n      handle,\n      getTokenTableItemRequest\n    );\n    return tableItem?.data;\n  } catch (e) {\n    console.log(e);\n    return;\n  }\n}\n\n/**\n * Poll Events on Aptos\n * @Note uncleared setTimeout calls will keep processes from ending organically (SIGTERM is needed)\n */\nexport class AptosEvent {\n  intervalId?: ReturnType<typeof setInterval>;\n  constructor(\n    readonly client: AptosClient,\n    readonly eventHandlerOwner: HexString,\n    readonly eventOwnerStruct: string,\n    readonly eventHandlerName: string,\n    readonly pollIntervalMs: number = 1000\n  ) {}\n\n  async onTrigger(\n    callback: EventCallback,\n    errorHandler?: (error: unknown) => void\n  ) {\n    // Get the start sequence number in the EVENT STREAM, defaulting to the latest event.\n    const [{ sequence_number }] = await this.client.getEventsByEventHandle(\n      this.eventHandlerOwner,\n      this.eventOwnerStruct,\n      this.eventHandlerName,\n      { limit: 1 }\n    );\n\n    // type for this is string for some reason\n    let lastSequenceNumber = sequence_number;\n\n    this.intervalId = setInterval(async () => {\n      const events = await this.client.getEventsByEventHandle(\n        this.eventHandlerOwner,\n        this.eventOwnerStruct,\n        this.eventHandlerName,\n        {\n          start: Number(lastSequenceNumber) + 1,\n          limit: 500,\n        }\n      );\n      if (events.length !== 0) {\n        // increment sequence number\n        lastSequenceNumber = events.at(-1)!.sequence_number;\n      }\n      for (let e of events) {\n        try {\n          // fire off the callback for all new events\n          await callback(e);\n        } catch (error) {}\n      }\n    }, this.pollIntervalMs);\n    return this.intervalId;\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n  }\n}\n\n/**\n * Common Constructor\n */\nclass SwitchboardResource {\n  client: AptosClient;\n  address: MaybeHexString;\n  tableType: TableType;\n  account?: AptosAccount;\n\n  constructor(\n    tableType: TableType,\n    client: AptosClient,\n    address: MaybeHexString,\n    account?: AptosAccount\n  ) {\n    this.tableType = tableType;\n    this.client = client;\n    this.account = account;\n    this.address = address;\n  }\n\n  // try to load data from on-chain\n  async loadData(): Promise<unknown | undefined> {\n    return await getTableItem(\n      this.client,\n      this.tableType,\n      HexString.ensure(this.address).hex()\n    );\n  }\n}\n\nexport class State {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly account: AptosAccount\n  ) {}\n\n  static async init(\n    client: AptosClient,\n    account: AptosAccount\n  ): Promise<[State, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::SwitchboardInitAction::run`,\n      []\n    );\n\n    return [new State(client, account.address(), account), tx];\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        this.address,\n        `${SWITCHBOARD_STATE_ADDRESS}::Switchboard::State`\n      )\n    ).data;\n  }\n}\n\nexport class Aggregator {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly account?: AptosAccount\n  ) {}\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${HexString.ensure(\n          SWITCHBOARD_DEVNET_ADDRESS\n        ).hex()}::Aggregator::Aggregator`\n      )\n    ).data;\n  }\n\n  async loadJobs(): Promise<Array<sbv2.OracleJob>> {\n    const data = await this.loadData();\n    const jobs = data.job_keys.map((key: string) => new Job(this.client, key));\n    const promises: Array<Promise<sbv2.OracleJob>> = [];\n    for (let job of jobs) {\n      promises.push(job.loadJob());\n    }\n    return await Promise.all(promises);\n  }\n\n  /**\n   * Initialize an Aggregator\n   * @param client\n   * @param account\n   * @param params AggregatorInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: AggregatorInitParams\n  ): Promise<[Aggregator, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::AggregatorInitAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        Buffer.from(params.name ?? \"\").toString(\"hex\"),\n        Buffer.from(params.metadata ?? \"\").toString(\"hex\"),\n        params.queueAddress\n          ? HexString.ensure(params.queueAddress).hex()\n          : HexString.ensure(\"0x0\").hex(),\n        params.batchSize.toString(),\n        params.minOracleResults.toString(),\n        params.minJobResults.toString(),\n        params.minUpdateDelaySeconds.toString(),\n        (params.startAfter ?? 0).toString(),\n        (params.varianceThreshold ?? 0).toString(),\n        params.varianceThresholdScale ?? 0,\n        (params.forceReportPeriod ?? 0).toString(),\n        (params.expiration ?? 0).toString(),\n        HexString.ensure(params.authority).hex(),\n      ]\n    );\n\n    return [new Aggregator(client, params.address, account), tx];\n  }\n\n  async addJob(\n    account: AptosAccount,\n    params: AggregatorAddJobParams\n  ): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::AggregatorAddJobAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        HexString.ensure(this.address).hex(),\n        HexString.ensure(params.job).hex(),\n        params.weight || 1,\n      ]\n    );\n  }\n\n  async saveResult(\n    account: AptosAccount,\n    params: AggregatorSaveResultParams\n  ): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::AggregatorSaveResultAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        HexString.ensure(params.oracle_address).hex(),\n        HexString.ensure(this.address).hex(),\n        params.oracle_idx.toString(),\n        params.error,\n        params.value_num.toString(),\n        params.value_scale_factor,\n        params.value_neg,\n        stringToHex(params.jobs_checksum),\n      ]\n    );\n  }\n\n  async openRound(): Promise<string> {\n    if (!this.account) {\n      throw \"Save Result Error: No Payer Found\";\n    }\n\n    return await sendAptosTx(\n      this.client,\n      this.account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::AggregatorOpenRoundAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        HexString.ensure(this.address).hex(),\n      ]\n    );\n  }\n}\n\nexport class Job {\n  constructor(readonly client: AptosClient, readonly address: MaybeHexString) {}\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        this.address,\n        `0x${SWITCHBOARD_DEVNET_ADDRESS}::Job::Job`\n      )\n    ).data;\n  }\n\n  async loadJob(): Promise<sbv2.OracleJob> {\n    const data = await this.loadData();\n    return sbv2.OracleJob.decodeDelimited(\n      Buffer.from(data.data.slice(2), \"hex\")\n    );\n  }\n\n  /**\n   * Initialize a Job stored in the switchboard resource account\n   * @param client\n   * @param account\n   * @param params JobInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: JobInitParams\n  ): Promise<[Job, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::JobInitAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        stringToHex(params.name),\n        stringToHex(params.metadata),\n        HexString.ensure(params.authority).hex(),\n        params.data,\n      ]\n    );\n\n    return [new Job(client, account.address()), tx];\n  }\n}\n\nexport class Crank {\n  constructor(readonly client: AptosClient, readonly address: MaybeHexString) {}\n\n  /**\n   * Initialize a Crank stored in the switchboard resource account\n   * @param client\n   * @param account account that will be the authority of the Crank\n   * @param params CrankInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: CrankInitParams\n  ): Promise<[Crank, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::CrankInitAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        HexString.ensure(params.address).hex(),\n        HexString.ensure(params.queueAddress).hex(),\n      ]\n    );\n\n    return [new Crank(client, params.address), tx];\n  }\n\n  /**\n   * Push an aggregator to a Crank\n   * @param params CrankPushParams\n   */\n  async push(account: AptosAccount, params: CrankPushParams): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::CrankPushAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        HexString.ensure(params.crankAddress).hex(),\n        HexString.ensure(params.aggregatorAddress).hex(),\n      ]\n    );\n  }\n\n  /**\n   * Pop an aggregator off the Crank\n   * @param params CrankPopParams\n   */\n  async pop(account: AptosAccount, params: CrankPopParams): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::CrankPopAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        HexString.ensure(params.crankAddress).hex(),\n      ]\n    );\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${HexString.ensure(SWITCHBOARD_DEVNET_ADDRESS).hex()}::Crank::Crank`\n      )\n    ).data;\n  }\n}\n\nexport class Oracle {\n  constructor(readonly client: AptosClient, readonly address: MaybeHexString) {}\n\n  /**\n   * Initialize a Oracle stored in the switchboard resource account\n   * @param client\n   * @param account\n   * @param params Oracle initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: OracleInitParams\n  ): Promise<[Oracle, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::OracleInitAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        stringToHex(params.name),\n        stringToHex(params.metadata),\n        HexString.ensure(params.authority).hex(),\n        HexString.ensure(params.queue).hex(),\n      ]\n    );\n\n    return [new Oracle(client, params.address), tx];\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${HexString.ensure(SWITCHBOARD_DEVNET_ADDRESS).hex()}::Oracle::Oracle`\n      )\n    ).data;\n  }\n\n  /**\n   * Oracle Heartbeat Action\n   */\n  async heartbeat(account: AptosAccount): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::OracleHeartbeatAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        HexString.ensure(this.address).hex(),\n      ]\n    );\n  }\n}\n\nexport class OracleQueue {\n  constructor(readonly client: AptosClient, readonly address: MaybeHexString) {}\n\n  /**\n   * Initialize a OracleQueue stored in the switchboard resource account\n   * @param client\n   * @param account\n   * @param params OracleQueue initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: OracleQueueInitParams\n  ): Promise<[OracleQueue, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${SWITCHBOARD_DEVNET_ADDRESS}::OracleQueueInitAction::run`,\n      [\n        HexString.ensure(SWITCHBOARD_STATE_ADDRESS).hex(),\n        stringToHex(params.name),\n        stringToHex(params.metadata),\n        HexString.ensure(params.authority).hex(),\n        params.oracleTimeout.toString(),\n        params.reward.toString(),\n        params.minStake.toString(),\n        params.slashingEnabled,\n        params.varianceToleranceMultiplierValue.toString(),\n        params.varianceToleranceMultiplierScale,\n        params.feedProbationPeriod.toString(),\n        params.consecutiveFeedFailureLimit.toString(),\n        params.consecutiveOracleFailureLimit.toString(),\n        params.unpermissionedFeedsEnabled,\n        params.unpermissionedVrfEnabled,\n        params.lockLeaseFunding,\n        HexString.ensure(params.mint).hex(),\n        params.enableBufferRelayers,\n        params.maxSize.toString(),\n      ]\n    );\n\n    return [new OracleQueue(client, account.address()), tx];\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${HexString.ensure(\n          SWITCHBOARD_DEVNET_ADDRESS\n        ).hex()}::OracleQueue::OracleQueue`\n      )\n    ).data;\n  }\n}\n"]}