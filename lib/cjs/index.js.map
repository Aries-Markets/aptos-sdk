{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AptosClient,\n  AptosAccount,\n  HexString,\n  MaybeHexString,\n  FaucetClient,\n  BCS,\n  TxnBuilderTypes,\n  Types,\n} from \"aptos\";\nimport { MoveStructTag, EntryFunctionId } from \"aptos/src/generated\";\nimport Big from \"big.js\";\nimport { OracleJob } from \"@switchboard-xyz/common\";\nimport BN from \"bn.js\";\nimport * as SHA3 from \"js-sha3\";\n\nexport { OracleJob, IOracleJob } from \"@switchboard-xyz/common\";\n\n// Address that deployed the module\nexport const SWITCHBOARD_DEVNET_ADDRESS = ``;\n\n// Address of the account that owns the Switchboard resource\nexport const SWITCHBOARD_STATE_ADDRESS = ``;\n\nexport class AptosDecimal {\n  constructor(\n    readonly mantissa: string,\n    readonly scale: number,\n    readonly neg: boolean\n  ) {}\n\n  toBig(): Big {\n    const oldDp = Big.DP;\n    Big.DP = 18;\n    let result = new Big(this.mantissa);\n    if (this.neg === true) {\n      result = result.mul(-1);\n    }\n    const TEN = new Big(10);\n    result = safeDiv(result, TEN.pow(this.scale));\n    Big.DP = oldDp;\n    return result;\n  }\n\n  static fromBig(val: Big): AptosDecimal {\n    const value = val.c.slice();\n    let e = val.e + 1;\n    while (value.length - e > 9) {\n      value.pop();\n    }\n    return new AptosDecimal(value.join(\"\"), value.length - e, val.s === -1);\n  }\n\n  static fromObj(obj: Object): AptosDecimal {\n    const properties = [\"mantissa\", \"scale\", \"neg\"];\n    properties.forEach((p) => {\n      if (!(p in obj)) {\n        throw new Error(`Object is missing property ${p}`);\n      }\n    });\n\n    return new AptosDecimal(obj[\"mantissa\"], obj[\"scale\"], obj[\"neg\"]);\n  }\n}\n\nexport enum SwitchboardPermission {\n  PERMIT_ORACLE_HEARTBEAT,\n  PERMIT_ORACLE_QUEUE_USAGE,\n  PERMIT_VRF_REQUESTS,\n}\n\nexport interface AggregatorAddJobParams {\n  job: MaybeHexString;\n  weight?: number;\n}\n\nexport interface AggregatorInitParams {\n  authority: MaybeHexString; // owner of aggregator\n  name?: string;\n  metadata?: string;\n  queueAddress: MaybeHexString;\n  coinType: MoveStructTag;\n  batchSize: number;\n  minOracleResults: number;\n  minJobResults: number;\n  minUpdateDelaySeconds: number;\n  startAfter?: number;\n  varianceThreshold?: Big;\n  forceReportPeriod?: number;\n  expiration?: number;\n  disableCrank?: boolean;\n  historySize?: number;\n  readCharge?: number;\n  rewardEscrow?: string;\n}\n\nexport interface AggregatorSaveResultParams {\n  oracleAddress: MaybeHexString;\n  oracleIdx: number;\n  error: boolean;\n  // this should probably be automatically generated\n  value: Big;\n  jobsChecksum: string;\n  minResponse: Big;\n  maxResponse: Big;\n}\n\nexport interface JobInitParams {\n  name: string;\n  metadata: string;\n  authority: MaybeHexString;\n  data: string;\n  weight?: number;\n}\n\nexport interface AggregatorRemoveJobParams {\n  aggregatorAddress: string;\n  job: string;\n}\n\nexport interface AggregatorSetConfigParams {\n  address: string;\n  authority: string;\n  name?: string;\n  metadata?: string;\n  queueAddress?: string;\n  batchSize: number;\n  minOracleResults: number;\n  minJobResults: number;\n  minUpdateDelaySeconds: number;\n  startAfter?: number;\n  varianceThreshold?: Big;\n  forceReportPeriod?: number;\n  expiration?: number;\n  disableCrank: boolean;\n  historySize: number;\n  readCharge: number;\n  rewardEscrow: string;\n  coinType?: string;\n}\n\nexport interface CrankInitParams {\n  address: string;\n  queueAddress: MaybeHexString;\n  coinType: MoveStructTag;\n}\n\nexport interface CrankPopParams {\n  crankAddress: string;\n}\n\nexport interface CrankPushParams {\n  aggregatorAddress: string;\n}\n\nexport interface OracleInitParams {\n  address: MaybeHexString;\n  name: string;\n  metadata: string;\n  authority: MaybeHexString;\n  queue: MaybeHexString;\n  coinType: MoveStructTag;\n}\n\nexport interface OracleQueueInitParams {\n  name: string;\n  metadata: string;\n  authority: MaybeHexString;\n  oracleTimeout: number;\n  reward: number;\n  minStake: number;\n  slashingEnabled: boolean;\n  varianceToleranceMultiplierValue: number;\n  varianceToleranceMultiplierScale: number;\n  feedProbationPeriod: number;\n  consecutiveFeedFailureLimit: number;\n  consecutiveOracleFailureLimit: number;\n  unpermissionedFeedsEnabled: boolean;\n  unpermissionedVrfEnabled: boolean;\n  lockLeaseFunding: boolean;\n\n  // this needs to be swapped with Coin or something later\n  mint: MaybeHexString;\n  enableBufferRelayers: boolean;\n  maxSize: number;\n  coinType: MoveStructTag;\n}\n\nexport interface LeaseInitParams {\n  queueAddress: MaybeHexString;\n  withdrawAuthority: MaybeHexString;\n  initialAmount: number;\n  coinType: MoveStructTag;\n}\n\nexport interface LeaseExtendParams {\n  loadAmount: number;\n}\n\nexport interface LeaseWithdrawParams {\n  amount: number;\n}\n\nexport interface OracleWalletInitParams {\n  oracleAddress: MaybeHexString;\n  coinType: string;\n}\n\nexport interface OracleWalletContributeParams {\n  oracleWalletAddr: MaybeHexString;\n  loadAmount: number;\n}\n\nexport interface OracleWalletWithdrawParams {\n  oracleWalletAddr: MaybeHexString;\n  amount: number;\n}\n\nexport interface PermissionInitParams {\n  authority: MaybeHexString;\n  granter: MaybeHexString;\n  grantee: MaybeHexString;\n}\n\nexport interface PermissionSetParams {\n  authority: MaybeHexString;\n  granter: MaybeHexString;\n  grantee: MaybeHexString;\n  permission: SwitchboardPermission;\n  enable: boolean;\n}\n\nexport type EventCallback = (\n  e: any\n) => Promise<void> /** | (() => Promise<void>) */;\n\n/**\n * Sends and waits for an aptos tx to be confirmed\n * @param client\n * @param signer\n * @param method Aptos module method (ex: 0xSwitchboard::aggregator_add_job_action)\n * @param args Arguments for method (converts numbers to strings)\n * @returns\n */\nexport async function sendAptosTx(\n  client: AptosClient,\n  signer: AptosAccount,\n  method: EntryFunctionId,\n  args: Array<any>,\n  type_args: Array<string> = [],\n  retryCount = 2\n): Promise<string> {\n  const payload = {\n    type: \"entry_function_payload\",\n    function: method,\n    type_arguments: type_args,\n    arguments: args,\n  };\n\n  const txnRequest = await client.generateTransaction(\n    signer.address(),\n    payload,\n    { max_gas_amount: \"5000\" }\n  );\n\n  const simulation = (await client.simulateTransaction(signer, txnRequest))[0];\n  if (simulation.vm_status === \"Out of gas\") {\n    if (retryCount > 0) {\n      const faucetClient = new FaucetClient(\n        \"https://fullnode.devnet.aptoslabs.com/v1\",\n        \"https://faucet.devnet.aptoslabs.com\"\n      );\n      await faucetClient.fundAccount(signer.address(), 5000);\n      return sendAptosTx(client, signer, method, args, type_args, --retryCount);\n    }\n  }\n  if (simulation.success === false) {\n    console.log(simulation);\n    throw new Error(`TxFailure: ${simulation.vm_status}`);\n  }\n\n  const signedTxn = await client.signTransaction(signer, txnRequest);\n  const transactionRes = await client.submitTransaction(signedTxn);\n  await client.waitForTransaction(transactionRes.hash);\n  return transactionRes.hash;\n}\n\n/**\n * Generates an aptos tx for client\n * @param method Aptos module method (ex: 0xSwitchboard::aggregator_add_job_action)\n * @param args Arguments for method (converts numbers to strings)\n * @param type_args Arguments for type_args\n * @returns\n */\nexport function getAptosTx(\n  method: EntryFunctionId,\n  args: Array<any>,\n  type_args: Array<string> = []\n): Types.TransactionPayload {\n  const payload: Types.TransactionPayload = {\n    type: \"entry_function_payload\",\n    function: method,\n    type_arguments: type_args,\n    arguments: args,\n  };\n  return payload;\n}\n\nexport async function simulateAndRun(\n  client: AptosClient,\n  user: AptosAccount,\n  txn: Types.TransactionPayload\n) {\n  const txnRequest = await client.generateTransaction(\n    user.address(),\n    txn as Types.EntryFunctionPayload,\n    { max_gas_amount: \"5000\" }\n  );\n\n  const simulation = (await client.simulateTransaction(user, txnRequest))[0];\n  if (simulation.success === false) {\n    console.log(simulation);\n    throw new Error(`TxFailure: ${simulation.vm_status}`);\n  }\n  const signedTxn = await client.signTransaction(user, txnRequest);\n  const transactionRes = await client.submitTransaction(signedTxn);\n  await client.waitForTransaction(transactionRes.hash);\n  return transactionRes.hash;\n}\n\nexport async function sendRawAptosTx(\n  client: AptosClient,\n  signer: AptosAccount,\n  method: EntryFunctionId,\n  raw_args: Array<any>,\n  raw_type_args: BCS.Seq<TxnBuilderTypes.TypeTag> = [],\n  retryCount = 2\n): Promise<string> {\n  // We need to pass a token type to the `transfer` function.\n\n  const methodInfo = method.split(\"::\");\n  const entryFunctionPayload =\n    new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        // Fully qualified module name, `AccountAddress::ModuleName`\n        `${methodInfo[0]}::${methodInfo[1]}`,\n        // Module function\n        methodInfo[2],\n        // The coin type to transfer\n        raw_type_args,\n        // Arguments for function `transfer`: receiver account address and amount to transfer\n        raw_args\n      )\n    );\n\n  const rawTxn = await client.generateRawTransaction(\n    signer.address(),\n    entryFunctionPayload,\n    { maxGasAmount: BigInt(5000) }\n  );\n\n  const bcsTxn = AptosClient.generateBCSTransaction(signer, rawTxn);\n\n  const simulation = (await client.simulateTransaction(signer, rawTxn))[0];\n  if (simulation.vm_status === \"Out of gas\") {\n    if (retryCount > 0) {\n      const faucetClient = new FaucetClient(\n        \"https://fullnode.devnet.aptoslabs.com/v1\",\n        \"https://faucet.devnet.aptoslabs.com\"\n      );\n      await faucetClient.fundAccount(signer.address(), 5000);\n      return sendRawAptosTx(\n        client,\n        signer,\n        method,\n        raw_args,\n        raw_type_args,\n        --retryCount\n      );\n    }\n  }\n  if (simulation.success === false) {\n    console.log(simulation);\n    throw new Error(`TxFailure: ${simulation.vm_status}`);\n  }\n\n  const transactionRes = await client.submitSignedBCSTransaction(bcsTxn);\n  await client.waitForTransaction(transactionRes.hash);\n  return transactionRes.hash;\n}\n\n/**\n * Poll Events on Aptos\n * @Note uncleared setTimeout calls will keep processes from ending organically (SIGTERM is needed)\n */\nexport class AptosEvent {\n  intervalId?: ReturnType<typeof setInterval>;\n  constructor(\n    readonly client: AptosClient,\n    readonly eventHandlerOwner: HexString,\n    readonly eventOwnerStruct: MoveStructTag,\n    readonly eventHandlerName: string,\n    readonly pollIntervalMs: number = 1000\n  ) {}\n\n  async onTrigger(\n    callback: EventCallback,\n    errorHandler?: (error: unknown) => void\n  ) {\n    let lastSequenceNumber = \"0\";\n    const ownerData = await this.client.getAccountResource(\n      this.eventHandlerOwner.hex(),\n      this.eventOwnerStruct\n    );\n    try {\n      lastSequenceNumber = (\n        Number(ownerData.data[this.eventHandlerName].counter) - 1\n      ).toString();\n    } catch (error) {\n      console.error(JSON.stringify(ownerData, undefined, 2), error);\n    }\n    if (Number(ownerData.data[this.eventHandlerName].counter) === -1) {\n      lastSequenceNumber = \"0\";\n    }\n\n    this.intervalId = setInterval(async () => {\n      try {\n        const events = await this.client.getEventsByEventHandle(\n          this.eventHandlerOwner,\n          this.eventOwnerStruct,\n          this.eventHandlerName,\n          {\n            start: BigInt(Number(lastSequenceNumber) + 1),\n            limit: 500,\n          }\n        );\n        if (events.length !== 0) {\n          // increment sequence number\n          lastSequenceNumber = events.at(-1)!.sequence_number;\n        }\n        for (let event of events) {\n          callback(event).catch((error) => {\n            if (errorHandler) {\n              errorHandler(error);\n            } else {\n              throw error;\n            }\n          });\n        }\n      } catch (error) {\n        if (errorHandler) {\n          errorHandler(error);\n        }\n      }\n    }, this.pollIntervalMs);\n    return this.intervalId;\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n  }\n}\n\nexport class StateAccount {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly payer: AptosAccount,\n    readonly switchboardAddress: MaybeHexString\n  ) {}\n\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    switchboardAddress: MaybeHexString\n  ): Promise<[StateAccount, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${switchboardAddress}::switchboard_init_action::run`,\n      []\n    );\n\n    return [\n      new StateAccount(client, account.address(), account, switchboardAddress),\n      tx,\n    ];\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        this.address,\n        `${this.switchboardAddress}::switchboard::State`\n      )\n    ).data;\n  }\n}\n\nexport class AggregatorAccount {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly switchboardAddress: MaybeHexString,\n    readonly coinType: MoveStructTag = \"0x1::aptos_coin::AptosCoin\"\n  ) {}\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${this.switchboardAddress}::aggregator::Aggregator`\n      )\n    ).data;\n  }\n\n  async loadJobs(): Promise<Array<OracleJob>> {\n    const data = await this.loadData();\n    const jobs = data.job_keys.map(\n      (key: string) =>\n        new JobAccount(\n          this.client,\n          HexString.ensure(key).hex(),\n          HexString.ensure(this.switchboardAddress).hex()\n        )\n    );\n    const promises: Array<Promise<OracleJob>> = [];\n    for (let job of jobs) {\n      promises.push(job.loadJob());\n    }\n    return await Promise.all(promises);\n  }\n\n  /**\n   * Initialize an Aggregator\n   * @param client\n   * @param account\n   * @param params AggregatorInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: AggregatorInitParams,\n    switchboardAddress: MaybeHexString\n  ): Promise<[AggregatorAccount, string]> {\n    const { mantissa: vtMantissa, scale: vtScale } = AptosDecimal.fromBig(\n      params.varianceThreshold ?? new Big(0)\n    );\n\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${switchboardAddress}::aggregator_init_action::run`,\n      [\n        params.name ?? \"\",\n        params.metadata ?? \"\",\n        HexString.ensure(params.queueAddress).hex(),\n        params.batchSize,\n        params.minOracleResults,\n        params.minJobResults,\n        params.minUpdateDelaySeconds,\n        params.startAfter ?? 0,\n        Number(vtMantissa),\n        Number(vtScale),\n        params.forceReportPeriod ?? 0,\n        params.expiration ?? 0,\n        params.disableCrank ?? false,\n        params.historySize ?? 0,\n        params.readCharge ?? 0,\n        params.rewardEscrow\n          ? HexString.ensure(params.rewardEscrow).hex()\n          : account.address().hex(),\n        HexString.ensure(params.authority).hex(),\n      ],\n      [params.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n\n    return [\n      new AggregatorAccount(\n        client,\n        account.address(),\n        switchboardAddress,\n        params.coinType ?? \"0x1::aptos_coin::AptosCoin\"\n      ),\n      tx,\n    ];\n  }\n\n  async addJob(\n    account: AptosAccount,\n    params: AggregatorAddJobParams\n  ): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::aggregator_add_job_action::run`,\n      [\n        HexString.ensure(this.address).hex(),\n        HexString.ensure(params.job).hex(),\n        params.weight || 1,\n      ]\n    );\n  }\n\n  addJobTx(params: AggregatorAddJobParams): Types.TransactionPayload {\n    return getAptosTx(\n      `${this.switchboardAddress}::aggregator_add_job_action::run`,\n      [\n        HexString.ensure(this.address).hex(),\n        HexString.ensure(params.job).hex(),\n        params.weight || 1,\n      ]\n    );\n  }\n\n  async saveResult(\n    account: AptosAccount,\n    params: AggregatorSaveResultParams\n  ): Promise<string> {\n    const {\n      mantissa: valueMantissa,\n      scale: valueScale,\n      neg: valueNeg,\n    } = AptosDecimal.fromBig(params.value);\n    const {\n      mantissa: minResponseMantissa,\n      scale: minResponseScale,\n      neg: minResponseNeg,\n    } = AptosDecimal.fromBig(params.minResponse);\n    const {\n      mantissa: maxResponseMantissa,\n      scale: maxResponseScale,\n      neg: maxResponseNeg,\n    } = AptosDecimal.fromBig(params.maxResponse);\n\n    return sendRawAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::aggregator_save_result_action::run`,\n      [\n        BCS.bcsToBytes(\n          TxnBuilderTypes.AccountAddress.fromHex(params.oracleAddress)\n        ),\n        BCS.bcsToBytes(TxnBuilderTypes.AccountAddress.fromHex(this.address)),\n        BCS.bcsSerializeUint64(params.oracleIdx),\n        BCS.bcsSerializeBool(params.error),\n        BCS.bcsSerializeU128(Number(valueMantissa)),\n        BCS.bcsSerializeU8(valueScale),\n        BCS.bcsSerializeBool(valueNeg),\n        BCS.bcsSerializeBytes(\n          HexString.ensure(params.jobsChecksum).toUint8Array()\n        ),\n        BCS.bcsSerializeU128(Number(minResponseMantissa)),\n        BCS.bcsSerializeU8(minResponseScale),\n        BCS.bcsSerializeBool(minResponseNeg),\n        BCS.bcsSerializeU128(Number(maxResponseMantissa)),\n        BCS.bcsSerializeU8(maxResponseScale),\n        BCS.bcsSerializeBool(maxResponseNeg),\n      ],\n      [\n        new TxnBuilderTypes.TypeTagStruct(\n          TxnBuilderTypes.StructTag.fromString(\n            this.coinType ?? \"0x1::aptos_coin::AptosCoin\"\n          )\n        ),\n      ]\n    );\n  }\n\n  async openRound(account: AptosAccount): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::aggregator_open_round_action::run`,\n      [HexString.ensure(this.address).hex()],\n      [this.coinType]\n    );\n  }\n\n  openRoundTx(): Types.TransactionPayload {\n    return getAptosTx(\n      `${this.switchboardAddress}::aggregator_open_round_action::run`,\n      [HexString.ensure(this.address).hex()],\n      [this.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n  }\n\n  setConfigTx(\n    accountAddress: MaybeHexString,\n    params: AggregatorSetConfigParams\n  ): Types.TransactionPayload {\n    const { mantissa: vtMantissa, scale: vtScale } = AptosDecimal.fromBig(\n      params.varianceThreshold ?? new Big(0)\n    );\n    const tx = getAptosTx(\n      `${this.switchboardAddress}::aggregator_init_action::run`,\n      [\n        HexString.ensure(this.address).hex(),\n        params.name ?? \"\",\n        params.metadata ?? \"\",\n        HexString.ensure(params.queueAddress).hex(),\n        params.batchSize,\n        params.minOracleResults,\n        params.minJobResults,\n        params.minUpdateDelaySeconds,\n        params.startAfter ?? 0,\n        Number(vtMantissa),\n        vtScale,\n        params.forceReportPeriod ?? 0,\n        params.expiration ?? 0,\n        params.disableCrank ?? false,\n        params.historySize ?? 0,\n        params.readCharge ?? 0,\n        params.rewardEscrow\n          ? HexString.ensure(params.rewardEscrow).hex()\n          : HexString.ensure(params.authority).hex(),\n        HexString.ensure(params.authority).hex(),\n      ],\n      [params.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n    return tx;\n  }\n\n  async watch(callback: EventCallback): Promise<AptosEvent> {\n    const event = new AptosEvent(\n      this.client,\n      HexString.ensure(this.switchboardAddress),\n      `${this.switchboardAddress}::switchboard::State`,\n      \"aggregator_update_events\",\n      1000\n    );\n    await event.onTrigger(callback);\n    return event;\n  }\n\n  static async shouldReportValue(\n    value: Big,\n    aggregator: any\n  ): Promise<boolean> {\n    if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {\n      return true;\n    }\n    const timestamp = new BN(Math.round(Date.now() / 1000), 10);\n    const startAfter = new BN(aggregator.startAfter, 10);\n    if (startAfter.gt(timestamp)) {\n      return false;\n    }\n    const varianceThreshold: Big = new AptosDecimal(\n      aggregator.varianceThreshold.mantissa,\n      aggregator.varianceThreshold.dec,\n      aggregator.varianceThreshold.neg\n    ).toBig();\n    const latestResult: Big = new AptosDecimal(\n      aggregator.latestConfirmedRound.result.mantissa,\n      aggregator.latestConfirmedRound.result.dec,\n      aggregator.latestConfirmedRound.result.neg\n    ).toBig();\n    const forceReportPeriod = new BN(aggregator.forceReportPeriod, 10);\n    const lastTimestamp = new BN(\n      aggregator.latestConfirmedRound.roundOpenTimestamp,\n      10\n    );\n    if (lastTimestamp.add(forceReportPeriod).lt(timestamp)) {\n      return true;\n    }\n    let diff = safeDiv(latestResult, value);\n    if (diff.abs().gt(1)) {\n      diff = safeDiv(value, latestResult);\n    }\n    // I dont want to think about variance percentage when values cross 0.\n    // Changes the scale of what we consider a \"percentage\".\n    if (diff.lt(0)) {\n      return true;\n    }\n    const changePercent = new Big(1).minus(diff).mul(100);\n    return changePercent.gt(varianceThreshold);\n  }\n}\n\nexport class JobAccount {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly switchboardAddress: MaybeHexString\n  ) {}\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        this.address,\n        `${HexString.ensure(this.switchboardAddress).hex()}::job::Job`\n      )\n    ).data;\n  }\n\n  async loadJob(): Promise<OracleJob> {\n    const data = await this.loadData();\n\n    // on-chain hex encoded base64 -> base64 -> Uint8Array -> OracleJob\n    const job = OracleJob.decodeDelimited(\n      Buffer.from(Buffer.from(data.data.slice(2), \"hex\").toString(), \"base64\")\n    );\n    return job;\n  }\n\n  /**\n   * Initialize a JobAccount\n   * @param client\n   * @param account\n   * @param params JobInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: JobInitParams,\n    switchboardAddress: MaybeHexString\n  ): Promise<[JobAccount, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${switchboardAddress}::job_init_action::run`,\n      [\n        params.name,\n        params.metadata,\n        HexString.ensure(params.authority).hex(),\n        params.data,\n      ]\n    );\n\n    return [new JobAccount(client, account.address(), switchboardAddress), tx];\n  }\n\n  /**\n   * Initialize a JobAccount\n   * @param client\n   * @param account\n   * @param params JobInitParams initialization params\n   */\n  static initTx(\n    client: AptosClient,\n    account: MaybeHexString,\n    params: JobInitParams,\n    switchboardAddress: MaybeHexString\n  ): [JobAccount, Types.TransactionPayload] {\n    const tx = getAptosTx(`${switchboardAddress}::job_init_action::run`, [\n      params.name,\n      params.metadata,\n      HexString.ensure(params.authority).hex(),\n      params.data,\n    ]);\n\n    return [new JobAccount(client, account, switchboardAddress), tx];\n  }\n}\n\nexport class CrankAccount {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly switchboardAddress: MaybeHexString,\n    readonly coinType: MoveStructTag = \"0x1::aptos_coin::AptosCoin\"\n  ) {}\n\n  /**\n   * Initialize a Crank\n   * @param client\n   * @param account account that will be the authority of the Crank\n   * @param params CrankInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: CrankInitParams,\n    switchboardAddress: MaybeHexString\n  ): Promise<[CrankAccount, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${switchboardAddress}::crank_init_action::run`,\n      [HexString.ensure(params.queueAddress).hex()],\n      [params.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n\n    return [\n      new CrankAccount(\n        client,\n        account.address(),\n        switchboardAddress,\n        params.coinType ?? \"0x1::aptos_coin::AptosCoin\"\n      ),\n      tx,\n    ];\n  }\n\n  /**\n   * Push an aggregator to a Crank\n   * @param params CrankPushParams\n   */\n  async push(account: AptosAccount, params: CrankPushParams): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::crank_push_action::run`,\n      [\n        HexString.ensure(this.address).hex(),\n        HexString.ensure(params.aggregatorAddress).hex(),\n      ],\n      [this.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n  }\n\n  pushTx(\n    account: MaybeHexString,\n    params: CrankPushParams\n  ): Types.TransactionPayload {\n    return getAptosTx(\n      `${this.switchboardAddress}::crank_push_action::run`,\n      [\n        HexString.ensure(this.address).hex(),\n        HexString.ensure(params.aggregatorAddress).hex(),\n      ],\n      [this.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n  }\n\n  /**\n   * Pop an aggregator off the Crank\n   */\n  async pop(account: AptosAccount): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::crank_pop_action::run`,\n      [HexString.ensure(this.address).hex()],\n      [this.coinType]\n    );\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${this.switchboardAddress}::crank::Crank`\n      )\n    ).data;\n  }\n}\n\nexport class OracleAccount {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly switchboardAddress: MaybeHexString,\n    readonly coinType: MoveStructTag = \"0x1::aptos_coin::AptosCoin\"\n  ) {}\n\n  /**\n   * Initialize a Oracle\n   * @param client\n   * @param account\n   * @param params Oracle initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: OracleInitParams,\n    switchboardAddress: MaybeHexString\n  ): Promise<[OracleAccount, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${switchboardAddress}::oracle_init_action::run`,\n      [\n        params.name,\n        params.metadata,\n        HexString.ensure(params.authority).hex(),\n        HexString.ensure(params.queue).hex(),\n      ],\n      [params.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n\n    return [\n      new OracleAccount(\n        client,\n        account.address(),\n        switchboardAddress,\n        params.coinType ?? \"0x1::aptos_coin::AptosCoin\"\n      ),\n      tx,\n    ];\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${this.switchboardAddress}::oracle::Oracle`\n      )\n    ).data;\n  }\n\n  /**\n   * Oracle Heartbeat Action\n   */\n  async heartbeat(account: AptosAccount): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::oracle_heartbeat_action::run`,\n      [HexString.ensure(this.address).hex()],\n      [this.coinType]\n    );\n  }\n}\n\nexport class OracleQueueAccount {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly switchboardAddress: MaybeHexString,\n    readonly coinType: MoveStructTag = \"0x1::aptos_coin::AptosCoin\"\n  ) {}\n\n  /**\n   * Initialize an OracleQueueAccount\n   * @param client\n   * @param account\n   * @param params OracleQueueAccount initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: OracleQueueInitParams,\n    switchboardAddress: MaybeHexString\n  ): Promise<[OracleQueueAccount, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${switchboardAddress}::oracle_queue_init_action::run`,\n      [\n        params.name,\n        params.metadata,\n        HexString.ensure(params.authority).hex(),\n        params.oracleTimeout,\n        params.reward,\n        params.minStake,\n        params.slashingEnabled,\n        params.varianceToleranceMultiplierValue,\n        params.varianceToleranceMultiplierScale,\n        params.feedProbationPeriod,\n        params.consecutiveFeedFailureLimit,\n        params.consecutiveOracleFailureLimit,\n        params.unpermissionedFeedsEnabled,\n        params.unpermissionedVrfEnabled,\n        params.lockLeaseFunding,\n        HexString.ensure(params.mint).hex(),\n        params.enableBufferRelayers,\n        params.maxSize,\n      ],\n      [params.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n\n    return [\n      new OracleQueueAccount(\n        client,\n        account.address(),\n        switchboardAddress,\n        params.coinType ?? \"0x1::aptos_coin::AptosCoin\"\n      ),\n      tx,\n    ];\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${this.switchboardAddress}::oracle_queue::OracleQueue<${this.coinType}>`\n      )\n    ).data;\n  }\n}\n\nexport class LeaseAccount {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly switchboardAddress: MaybeHexString,\n    readonly coinType: MoveStructTag = \"0x1::aptos_coin::AptosCoin\"\n  ) {}\n\n  /**\n   * Initialize a LeaseAccount\n   * @param client\n   * @param account account that will be the authority of the LeaseAccount\n   * @param params LeaseInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: LeaseInitParams,\n    switchboardAddress: MaybeHexString\n  ): Promise<[LeaseAccount, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${switchboardAddress}::lease_init_action::run`,\n      [\n        HexString.ensure(params.queueAddress).hex(),\n        HexString.ensure(params.withdrawAuthority).hex(),\n        params.initialAmount,\n      ],\n      [params.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n\n    return [\n      new LeaseAccount(\n        client,\n        account.address(),\n        switchboardAddress,\n        params.coinType ?? \"0x1::aptos_coin::AptosCoin\"\n      ),\n      tx,\n    ];\n  }\n\n  /**\n   * Extend a lease\n   * @param params CrankPushParams\n   */\n  async extend(\n    account: AptosAccount,\n    params: LeaseExtendParams\n  ): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::lease_extend_action::run`,\n      [HexString.ensure(this.address).hex(), params.loadAmount],\n      [this.coinType]\n    );\n  }\n\n  /**\n   * Extend a lease\n   * @param params CrankPushParams\n   */\n  extendTx(\n    account: MaybeHexString,\n    params: LeaseExtendParams\n  ): Types.TransactionPayload {\n    return getAptosTx(\n      `${this.switchboardAddress}::lease_extend_action::run`,\n      [HexString.ensure(this.address).hex(), params.loadAmount],\n      [this.coinType]\n    );\n  }\n\n  /**\n   * Pop an aggregator off the Crank\n   */\n  async withdraw(\n    account: AptosAccount,\n    params: LeaseWithdrawParams\n  ): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::lease_withdraw_action::run`,\n      [[HexString.ensure(this.address).hex(), params.amount]],\n      [this.coinType]\n    );\n  }\n\n  /**\n   * Pop an aggregator off the Crank\n   */\n  withdrawTx(\n    account: MaybeHexString,\n    params: LeaseWithdrawParams\n  ): Types.TransactionPayload {\n    return getAptosTx(\n      `${this.switchboardAddress}::lease_withdraw_action::run`,\n      [[HexString.ensure(this.address).hex(), params.amount]],\n      [this.coinType]\n    );\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${this.switchboardAddress}::lease::Lease<${this.coinType}>`\n      )\n    ).data;\n  }\n}\n\nexport class OracleWallet {\n  constructor(\n    readonly client: AptosClient,\n    readonly address: MaybeHexString,\n    readonly switchboardAddress: MaybeHexString,\n    readonly coinType: MoveStructTag = \"0x1::aptos_coin::AptosCoin\"\n  ) {}\n\n  /**\n   * Initialize an OracleWallet\n   * @param client\n   * @param account account that will be the authority of the OracleWallet\n   * @param params OracleWalletInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: OracleWalletInitParams,\n    switchboardAddress: MaybeHexString\n  ): Promise<[OracleWallet, string]> {\n    const tx = await sendAptosTx(\n      client,\n      account,\n      `${switchboardAddress}::oracle_wallet_init_action::run`,\n      [HexString.ensure(params.oracleAddress).hex()],\n      [params.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    );\n\n    return [\n      new OracleWallet(\n        client,\n        account.address(),\n        switchboardAddress,\n        params.coinType ?? \"0x1::aptos_coin::AptosCoin\"\n      ),\n      tx,\n    ];\n  }\n\n  /**\n   * Contributes to an oracle wallet\n   * @param params OracleWalletContributeParams\n   */\n  async contribute(\n    account: AptosAccount,\n    params: OracleWalletContributeParams\n  ): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::oracle_wallet_contribute_action::run`,\n      [HexString.ensure(this.address).hex(), params.loadAmount],\n      [this.coinType]\n    );\n  }\n\n  /**\n   * Withdraw from an OracleWallet\n   */\n  async withdraw(\n    account: AptosAccount,\n    params: OracleWalletWithdrawParams\n  ): Promise<string> {\n    return await sendAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::oracle_wallet_withdraw_action::run`,\n      [[HexString.ensure(this.address).hex(), params.amount]],\n      [this.coinType]\n    );\n  }\n\n  async loadData(): Promise<any> {\n    return (\n      await this.client.getAccountResource(\n        HexString.ensure(this.address).hex(),\n        `${this.switchboardAddress}::oracle_wallet::OracleWallet<${this.coinType}>`\n      )\n    ).data;\n  }\n}\n\nexport class Permission {\n  constructor(\n    readonly client: AptosClient,\n    readonly switchboardAddress: MaybeHexString\n  ) {}\n\n  /**\n   * Initialize a Permission\n   * @param client\n   * @param account\n   * @param params PermissionInitParams initialization params\n   */\n  static async init(\n    client: AptosClient,\n    account: AptosAccount,\n    params: PermissionInitParams,\n    switchboardAddress: MaybeHexString\n  ): Promise<[Permission, string]> {\n    const tx = await sendRawAptosTx(\n      client,\n      account,\n      `${switchboardAddress}::permission_init_action::run`,\n      [\n        BCS.bcsToBytes(\n          TxnBuilderTypes.AccountAddress.fromHex(params.authority)\n        ),\n        BCS.bcsSerializeBytes(HexString.ensure(params.granter).toUint8Array()),\n        BCS.bcsSerializeBytes(HexString.ensure(params.granter).toUint8Array()),\n      ]\n    );\n\n    return [new Permission(client, switchboardAddress), tx];\n  }\n\n  /**\n   * Set a Permission\n   */\n  async set(\n    account: AptosAccount,\n    params: PermissionSetParams\n  ): Promise<string> {\n    const tx = await sendRawAptosTx(\n      this.client,\n      account,\n      `${this.switchboardAddress}::permission_set_action::run`,\n      [\n        BCS.bcsToBytes(\n          TxnBuilderTypes.AccountAddress.fromHex(params.authority)\n        ),\n        BCS.bcsSerializeBytes(HexString.ensure(params.granter).toUint8Array()),\n        BCS.bcsSerializeBytes(HexString.ensure(params.granter).toUint8Array()),\n        BCS.bcsSerializeUint64(params.permission),\n        BCS.bcsSerializeBool(params.enable),\n      ]\n    );\n    return tx;\n  }\n}\n\nfunction safeDiv(number_: Big, denominator: Big, decimals = 20): Big {\n  const oldDp = Big.DP;\n  Big.DP = decimals;\n  const result = number_.div(denominator);\n  Big.DP = oldDp;\n  return result;\n}\n\ninterface CreateFeedParams extends AggregatorInitParams {\n  jobs: JobInitParams[];\n  initialLoadAmount: number;\n  crank: MaybeHexString;\n}\n\nexport async function createFeedTx(\n  client: AptosClient,\n  authority: MaybeHexString,\n  params: CreateFeedParams,\n  switchboardAddress: MaybeHexString\n): Promise<[AggregatorAccount, Types.TransactionPayload]> {\n  const seed = new AptosAccount().address();\n  const resource_address = generateResourceAccountAddress(\n    HexString.ensure(authority),\n    bcsAddressToBytes(HexString.ensure(seed))\n  );\n\n  if (params.jobs.length > 8) {\n    throw new Error(\n      \"Max Job limit exceeded. The create_feed_action can only create up to 8 jobs at a time.\"\n    );\n  }\n\n  const { mantissa: vtMantissa, scale: vtScale } = AptosDecimal.fromBig(\n    params.varianceThreshold ?? new Big(0)\n  );\n\n  // enforce size 8 jobs array\n  let jobs =\n    params.jobs.length < 8\n      ? [\n          ...params.jobs,\n          ...new Array<JobInitParams>(8 - params.jobs.length).fill({\n            name: \"\",\n            metadata: \"\",\n            authority: \"\",\n            data: \"\",\n            weight: 1,\n          }),\n        ]\n      : params.jobs;\n\n  return [\n    new AggregatorAccount(\n      client,\n      resource_address,\n      switchboardAddress,\n      params.coinType ?? \"0x1::aptos_coin::AptosCoin\"\n    ),\n    getAptosTx(\n      `${switchboardAddress}::create_feed_action::run`,\n      [\n        // authority will own everything\n        HexString.ensure(params.authority).hex(),\n\n        // aggregator\n        params.name ?? \"\",\n        params.metadata ?? \"\",\n        HexString.ensure(params.queueAddress).hex(),\n        params.batchSize,\n        params.minOracleResults,\n        params.minJobResults,\n        params.minUpdateDelaySeconds,\n        params.startAfter ?? 0,\n        Number(vtMantissa),\n        vtScale,\n        params.forceReportPeriod ?? 0,\n        params.expiration ?? 0,\n        params.disableCrank ?? false,\n        params.historySize ?? 0,\n        params.readCharge ?? 0,\n        params.rewardEscrow\n          ? HexString.ensure(params.rewardEscrow).hex()\n          : HexString.ensure(params.authority).hex(),\n\n        // lease\n        params.initialLoadAmount,\n\n        // jobs\n        ...jobs.flatMap((jip) => {\n          return [jip.name, jip.metadata, jip.data, jip.weight || 1];\n        }),\n\n        // crank\n        HexString.ensure(params.crank).hex(),\n\n        // seed\n        seed.hex(),\n      ],\n      [params.coinType ?? \"0x1::aptos_coin::AptosCoin\"]\n    ),\n  ];\n}\n\nexport async function createFeed(\n  client: AptosClient,\n  account: AptosAccount,\n  params: CreateFeedParams,\n  switchboardAddress: MaybeHexString\n): Promise<[AggregatorAccount, string]> {\n  const [aggregator, txn] = await createFeedTx(\n    client,\n    account.address(),\n    params,\n    switchboardAddress\n  );\n\n  const tx = await simulateAndRun(client, account, txn);\n  return [aggregator, tx];\n}\n\nexport function bcsAddressToBytes(hexStr: HexString): Uint8Array {\n  return BCS.bcsToBytes(TxnBuilderTypes.AccountAddress.fromHex(hexStr));\n}\n\nexport function generateResourceAccountAddress(\n  origin: HexString,\n  seed: Uint8Array\n): MaybeHexString {\n  const hash = SHA3.sha3_256.create();\n  const userAddressBCS = bcsAddressToBytes(origin);\n  hash.update(userAddressBCS);\n  hash.update(seed);\n  return `0x${hash.hex()}`;\n}\n\nexport async function fetchAggregators(\n  client: AptosClient,\n  authority: MaybeHexString,\n  switchboardAddress: MaybeHexString\n): Promise<any[]> {\n  const handle = (\n    (await client.getAccountResource(\n      switchboardAddress,\n      `${switchboardAddress}::switchboard::State`\n    )) as any\n  ).data.aggregator_authorities.handle;\n  const tableItems = await client.getTableItem(handle, {\n    key_type: `address`,\n    value_type: `vector<address>`,\n    key: HexString.ensure(authority).hex(),\n  });\n  return (\n    await Promise.all(\n      tableItems.map((aggregatorAddress: MaybeHexString) =>\n        new AggregatorAccount(\n          client,\n          aggregatorAddress,\n          switchboardAddress\n        ).loadData()\n      )\n    )\n  ).map((aggregator: any, i) => {\n    aggregator.address = tableItems[i];\n    return aggregator; // map addresses back to the aggregator object\n  });\n}\n"]}